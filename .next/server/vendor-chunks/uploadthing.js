"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uploadthing";
exports.ids = ["vendor-chunks/uploadthing"];
exports.modules = {

/***/ "(ssr)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFullApiUrl: () => (/* binding */ getFullApiUrl)\n/* harmony export */ });\n// src/internal/get-full-api-url.ts\nfunction getFullApiUrl(maybeUrl) {\n    const base = (()=>{\n        var _a, _b;\n        if (false) {}\n        if (typeof process !== \"undefined\" && ((_a = process == null ? void 0 : process.env) == null ? void 0 : _a.VERCEL_URL)) {\n            return `https://${process.env.VERCEL_URL}`;\n        }\n        if ((_b = /* unsupported import.meta.env */ undefined) == null ? void 0 : _b.VERCEL_URL) {\n            return `https://${/* unsupported import.meta.env.VERCEL_URL */ undefined.VERCEL_URL}`;\n        }\n        return \"http://localhost:3000\";\n    })();\n    try {\n        const url = new URL(maybeUrl ?? \"/api/uploadthing\", base);\n        if (url.pathname === \"/\") {\n            url.pathname = \"/api/uploadthing\";\n        }\n        return url;\n    } catch (err) {\n        throw new Error(`Failed to parse '${maybeUrl}' as a URL. Make sure it's a valid URL or path`);\n    }\n}\n //# sourceMappingURL=chunk-4PDGVH57.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay00UERHVkg1Ny5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLG1DQUFtQztBQUNuQyxTQUFTQSxjQUFjQyxRQUFRO0lBQzdCLE1BQU1DLE9BQU8sQ0FBQztRQUNaLElBQUlDLElBQUlDO1FBQ1IsSUFBSSxLQUE2QixFQUFFLEVBRWxDO1FBQ0QsSUFBSSxPQUFPSSxZQUFZLGVBQWdCLEVBQUNMLEtBQUtLLFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVFDLEdBQUcsS0FBSyxPQUFPLEtBQUssSUFBSU4sR0FBR08sVUFBVSxHQUFHO1lBQ3RILE9BQU8sQ0FBQyxRQUFRLEVBQUVGLFFBQVFDLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDLENBQUM7UUFDNUM7UUFDQSxJQUFJLENBQUNOLEtBQUssMkNBQWUsS0FBSyxPQUFPLEtBQUssSUFBSUEsR0FBR00sVUFBVSxFQUFFO1lBQzNELE9BQU8sQ0FBQyxRQUFRLEVBQUUsaUVBQTBCLENBQUMsQ0FBQztRQUNoRDtRQUNBLE9BQU87SUFDVDtJQUNBLElBQUk7UUFDRixNQUFNQyxNQUFNLElBQUlDLElBQUlYLFlBQVksb0JBQW9CQztRQUNwRCxJQUFJUyxJQUFJRSxRQUFRLEtBQUssS0FBSztZQUN4QkYsSUFBSUUsUUFBUSxHQUFHO1FBQ2pCO1FBQ0EsT0FBT0Y7SUFDVCxFQUFFLE9BQU9HLEtBQUs7UUFDWixNQUFNLElBQUlDLE1BQ1IsQ0FBQyxpQkFBaUIsRUFBRWQsU0FBUyw4Q0FBOEMsQ0FBQztJQUVoRjtBQUNGO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGx5Ly4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvY2h1bmstNFBER1ZINTcubWpzPzI0ZGEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2ludGVybmFsL2dldC1mdWxsLWFwaS11cmwudHNcbmZ1bmN0aW9uIGdldEZ1bGxBcGlVcmwobWF5YmVVcmwpIHtcbiAgY29uc3QgYmFzZSA9ICgoKSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoKF9hID0gcHJvY2VzcyA9PSBudWxsID8gdm9pZCAwIDogcHJvY2Vzcy5lbnYpID09IG51bGwgPyB2b2lkIDAgOiBfYS5WRVJDRUxfVVJMKSkge1xuICAgICAgcmV0dXJuIGBodHRwczovLyR7cHJvY2Vzcy5lbnYuVkVSQ0VMX1VSTH1gO1xuICAgIH1cbiAgICBpZiAoKF9iID0gaW1wb3J0Lm1ldGEuZW52KSA9PSBudWxsID8gdm9pZCAwIDogX2IuVkVSQ0VMX1VSTCkge1xuICAgICAgcmV0dXJuIGBodHRwczovLyR7aW1wb3J0Lm1ldGEuZW52LlZFUkNFTF9VUkx9YDtcbiAgICB9XG4gICAgcmV0dXJuIFwiaHR0cDovL2xvY2FsaG9zdDozMDAwXCI7XG4gIH0pKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChtYXliZVVybCA/PyBcIi9hcGkvdXBsb2FkdGhpbmdcIiwgYmFzZSk7XG4gICAgaWYgKHVybC5wYXRobmFtZSA9PT0gXCIvXCIpIHtcbiAgICAgIHVybC5wYXRobmFtZSA9IFwiL2FwaS91cGxvYWR0aGluZ1wiO1xuICAgIH1cbiAgICByZXR1cm4gdXJsO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRmFpbGVkIHRvIHBhcnNlICcke21heWJlVXJsfScgYXMgYSBVUkwuIE1ha2Ugc3VyZSBpdCdzIGEgdmFsaWQgVVJMIG9yIHBhdGhgXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQge1xuICBnZXRGdWxsQXBpVXJsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstNFBER1ZINTcubWpzLm1hcCJdLCJuYW1lcyI6WyJnZXRGdWxsQXBpVXJsIiwibWF5YmVVcmwiLCJiYXNlIiwiX2EiLCJfYiIsIndpbmRvdyIsImxvY2F0aW9uIiwib3JpZ2luIiwicHJvY2VzcyIsImVudiIsIlZFUkNFTF9VUkwiLCJ1cmwiLCJVUkwiLCJwYXRobmFtZSIsImVyciIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeParseResponseXML: () => (/* binding */ maybeParseResponseXML),\n/* harmony export */   uploadPart: () => (/* binding */ uploadPart),\n/* harmony export */   uploadPartWithProgress: () => (/* binding */ uploadPartWithProgress)\n/* harmony export */ });\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n// src/internal/multi-part.ts\n\n// src/internal/s3-error-parser.ts\nvar maybeParseResponseXML = (maybeXml)=>{\n    const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n    const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n    const code = codeMatch == null ? void 0 : codeMatch[1];\n    const message = messageMatch == null ? void 0 : messageMatch[1];\n    if (!code || !message) return null;\n    return {\n        code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE,\n        message\n    };\n};\nvar DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nvar s3CodeToUploadThingCode = {\n    AccessDenied: \"FORBIDDEN\",\n    // 403 Forbidden\n    EntityTooSmall: \"TOO_SMALL\",\n    // 400 Bad Request\n    EntityTooLarge: \"TOO_LARGE\",\n    // 400 Bad Request\n    ExpiredToken: \"FORBIDDEN\",\n    // 400 Bad Request\n    IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\",\n    // 400 Bad Request\n    InternalError: \"INTERNAL_SERVER_ERROR\",\n    // 500 Internal Server Error\n    KeyTooLongError: \"KEY_TOO_LONG\",\n    // 400 Bad Request\n    MaxMessageLengthExceeded: \"TOO_LARGE\"\n};\n// src/internal/multi-part.ts\nasync function uploadPart(opts, retryCount = 0) {\n    const s3Res = await opts.fetch(opts.url, {\n        method: \"PUT\",\n        body: opts.chunk,\n        headers: {\n            \"Content-Type\": opts.contentType,\n            \"Content-Disposition\": [\n                opts.contentDisposition,\n                `filename=\"${encodeURI(opts.fileName)}\"`,\n                `filename*=UTF-8''${encodeURI(opts.fileName)}`\n            ].join(\"; \")\n        }\n    });\n    if (s3Res.ok) {\n        const etag = s3Res.headers.get(\"Etag\");\n        if (!etag) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: \"Missing Etag header from uploaded part\"\n            });\n        }\n        return etag.replace(/\"/g, \"\");\n    }\n    if (retryCount < opts.maxRetries) {\n        const delay = 2 ** retryCount * 1e3;\n        await new Promise((r)=>setTimeout(r, delay));\n        return uploadPart(opts, retryCount++);\n    }\n    await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/failureCallback\"), {\n        method: \"POST\",\n        body: JSON.stringify({\n            fileKey: opts.key\n        }),\n        headers: opts.utRequestHeaders\n    });\n    const text = await s3Res.text();\n    const parsed = maybeParseResponseXML(text);\n    if (parsed == null ? void 0 : parsed.message) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: parsed.message\n        });\n    }\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"Failed to upload file to storage provider\",\n        cause: s3Res\n    });\n}\nasync function uploadPartWithProgress(opts, retryCount = 0) {\n    return new Promise((resolve, reject)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", opts.url, true);\n        xhr.setRequestHeader(\"Content-Type\", opts.fileType);\n        xhr.setRequestHeader(\"Content-Disposition\", [\n            opts.contentDisposition,\n            `filename=\"${encodeURI(opts.fileName)}\"`,\n            `filename*=UTF-8''${encodeURI(opts.fileName)}`\n        ].join(\"; \"));\n        xhr.onload = async ()=>{\n            if (xhr.status >= 200 && xhr.status < 300) {\n                const etag = xhr.getResponseHeader(\"Etag\");\n                etag ? resolve(etag) : reject(\"NO ETAG\");\n            } else if (retryCount < opts.maxRetries) {\n                const delay = Math.pow(2, retryCount) * 1e3;\n                await new Promise((res)=>setTimeout(res, delay));\n                await uploadPartWithProgress(opts, retryCount + 1);\n            } else {\n                reject(\"Max retries exceeded\");\n            }\n        };\n        let lastProgress = 0;\n        xhr.onerror = async ()=>{\n            lastProgress = 0;\n            if (retryCount < opts.maxRetries) {\n                const delay = Math.pow(2, retryCount) * 100;\n                await new Promise((res)=>setTimeout(res, delay));\n                await uploadPartWithProgress(opts, retryCount + 1);\n            } else {\n                reject(\"Max retries exceeded\");\n            }\n        };\n        xhr.upload.onprogress = (e)=>{\n            const delta = e.loaded - lastProgress;\n            lastProgress += delta;\n            opts.onProgress(delta);\n        };\n        xhr.send(opts.chunk);\n    });\n}\n //# sourceMappingURL=chunk-S3R3VXRK.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/client.mjs":
/*!**************************************************!*\
  !*** ./node_modules/uploadthing/dist/client.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DANGEROUS__uploadFiles: () => (/* binding */ DANGEROUS__uploadFiles),\n/* harmony export */   INTERNAL_DO_NOT_USE__fatalClientError: () => (/* binding */ INTERNAL_DO_NOT_USE__fatalClientError),\n/* harmony export */   INTERNAL_doFormatting: () => (/* binding */ INTERNAL_doFormatting),\n/* harmony export */   allowedContentTextLabelGenerator: () => (/* binding */ allowedContentTextLabelGenerator),\n/* harmony export */   capitalizeStart: () => (/* binding */ capitalizeStart),\n/* harmony export */   classNames: () => (/* binding */ classNames),\n/* harmony export */   contentFieldToContent: () => (/* binding */ contentFieldToContent),\n/* harmony export */   genUploader: () => (/* binding */ genUploader),\n/* harmony export */   generateClientDropzoneAccept: () => (/* binding */ generateClientDropzoneAccept),\n/* harmony export */   generateMimeTypes: () => (/* binding */ generateMimeTypes),\n/* harmony export */   generatePermittedFileTypes: () => (/* binding */ generatePermittedFileTypes),\n/* harmony export */   getFullApiUrl: () => (/* reexport safe */ _chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_1__.getFullApiUrl),\n/* harmony export */   styleFieldToClassName: () => (/* binding */ styleFieldToClassName),\n/* harmony export */   styleFieldToCssObject: () => (/* binding */ styleFieldToCssObject)\n/* harmony export */ });\n/* harmony import */ var _chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-S3R3VXRK.mjs */ \"(ssr)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\");\n/* harmony import */ var _chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-4PDGVH57.mjs */ \"(ssr)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n\n// src/client.ts\n\n// src/internal/ut-reporter.ts\n\nvar createAPIRequestUrl = (config)=>{\n    const url = new URL(config.url);\n    const queryParams = new URLSearchParams(url.search);\n    queryParams.set(\"actionType\", config.actionType);\n    queryParams.set(\"slug\", config.slug);\n    url.search = queryParams.toString();\n    return url;\n};\nvar createUTReporter = (cfg)=>{\n    return async (type, payload)=>{\n        const url = createAPIRequestUrl({\n            url: cfg.url,\n            slug: cfg.endpoint,\n            actionType: type\n        });\n        const response = await fetch(url, {\n            method: \"POST\",\n            body: JSON.stringify(payload),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        switch(type){\n            case \"failure\":\n                {\n                    const p = payload;\n                    const parsed = (0,_chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__.maybeParseResponseXML)(p.s3Error ?? \"\");\n                    if (parsed == null ? void 0 : parsed.message) {\n                        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                            code: parsed.code,\n                            message: parsed.message\n                        });\n                    } else {\n                        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                            code: \"UPLOAD_FAILED\",\n                            message: `Failed to upload file ${p.fileName} to S3`,\n                            cause: p.s3Error\n                        });\n                    }\n                }\n        }\n        return response.ok;\n    };\n};\n// src/internal/component-theming.ts\n\nvar generatePermittedFileTypes = (config)=>{\n    const fileTypes = config ? (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(config) : [];\n    const maxFileCount = config ? Object.values(config).map((v)=>v.maxFileCount) : [];\n    return {\n        fileTypes,\n        multiple: maxFileCount.some((v)=>v && v > 1)\n    };\n};\nvar capitalizeStart = (str)=>{\n    return str.charAt(0).toUpperCase() + str.slice(1);\n};\nvar INTERNAL_doFormatting = (config)=>{\n    if (!config) return \"\";\n    const allowedTypes = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(config);\n    const formattedTypes = allowedTypes.map((f)=>f === \"blob\" ? \"file\" : f);\n    if (formattedTypes.length > 1) {\n        const lastType = formattedTypes.pop();\n        return `${formattedTypes.join(\"s, \")} and ${lastType}s`;\n    }\n    const key = allowedTypes[0];\n    const formattedKey = formattedTypes[0];\n    const { maxFileSize, maxFileCount } = config[key];\n    if (maxFileCount && maxFileCount > 1) {\n        return `${formattedKey}s up to ${maxFileSize}, max ${maxFileCount}`;\n    } else {\n        return `${formattedKey} (${maxFileSize})`;\n    }\n};\nvar allowedContentTextLabelGenerator = (config)=>{\n    return capitalizeStart(INTERNAL_doFormatting(config));\n};\nvar styleFieldToClassName = (styleField, args)=>{\n    if (typeof styleField === \"string\") return styleField;\n    if (typeof styleField === \"function\") {\n        const result = styleField(args);\n        if (typeof result === \"string\") return result;\n    }\n    return \"\";\n};\nvar styleFieldToCssObject = (styleField, args)=>{\n    if (typeof styleField === \"object\") return styleField;\n    if (typeof styleField === \"function\") {\n        const result = styleField(args);\n        if (typeof result === \"object\") return result;\n    }\n    return {};\n};\nvar contentFieldToContent = (contentField, arg)=>{\n    if (!contentField) return null;\n    if (typeof contentField !== \"function\") return contentField;\n    if (typeof contentField === \"function\") {\n        const result = contentField(arg);\n        return result;\n    }\n};\n// src/client.ts\nvar INTERNAL_DO_NOT_USE__fatalClientError = (e)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n        code: \"INTERNAL_CLIENT_ERROR\",\n        message: \"Something went wrong. Please report this to UploadThing.\",\n        cause: e\n    });\nvar DANGEROUS__uploadFiles = async (endpoint, opts)=>{\n    const reportEventToUT = createUTReporter({\n        endpoint: String(endpoint),\n        url: opts.url\n    });\n    const s3ConnectionRes = await fetch(createAPIRequestUrl({\n        url: opts.url,\n        slug: String(endpoint),\n        actionType: \"upload\"\n    }), {\n        method: \"POST\",\n        body: JSON.stringify({\n            input: \"input\" in opts ? opts.input : null,\n            files: opts.files.map((f)=>({\n                    name: f.name,\n                    size: f.size\n                }))\n        }),\n        // Express requires Content-Type to be explicitly set to parse body properly\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }).then(async (res)=>{\n        if (!res.ok) {\n            const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError.fromResponse(res);\n            throw error;\n        }\n        const jsonOrError = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.safeParseJSON)(res);\n        if (jsonOrError instanceof Error) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: jsonOrError.message,\n                cause: res\n            });\n        }\n        return jsonOrError;\n    });\n    if (!s3ConnectionRes || !Array.isArray(s3ConnectionRes)) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"No URL. How did you even get here?\",\n            cause: s3ConnectionRes\n        });\n    }\n    const fileUploadPromises = s3ConnectionRes.map(async (presigned)=>{\n        const file = opts.files.find((f)=>f.name === presigned.fileName);\n        if (!file) {\n            console.error(\"No file found for presigned URL\", presigned);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                code: \"NOT_FOUND\",\n                message: \"No file found for presigned URL\",\n                cause: `Expected file with name ${presigned.fileName} but got '${opts.files.join(\",\")}'`\n            });\n        }\n        const { presignedUrls, uploadId, chunkSize, contentDisposition, key, pollingUrl, pollingJwt } = presigned;\n        let uploadedBytes = 0;\n        let etags;\n        try {\n            etags = await Promise.all(presignedUrls.map(async (url, index)=>{\n                const offset = chunkSize * index;\n                const end = Math.min(offset + chunkSize, file.size);\n                const chunk = file.slice(offset, end);\n                const etag = await (0,_chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__.uploadPartWithProgress)({\n                    url,\n                    chunk,\n                    contentDisposition,\n                    fileType: file.type,\n                    fileName: file.name,\n                    maxRetries: 10,\n                    onProgress: (delta)=>{\n                        var _a;\n                        uploadedBytes += delta;\n                        const percent = uploadedBytes / file.size * 100;\n                        (_a = opts.onUploadProgress) == null ? void 0 : _a.call(opts, {\n                            file: file.name,\n                            progress: percent\n                        });\n                    }\n                });\n                return {\n                    tag: etag,\n                    partNumber: index + 1\n                };\n            }));\n        } catch (error) {\n            await reportEventToUT(\"failure\", {\n                fileKey: key,\n                uploadId,\n                fileName: file.name,\n                s3Error: error.toString()\n            });\n            throw \"unreachable\";\n        }\n        const uploadOk = await reportEventToUT(\"multipart-complete\", {\n            uploadId,\n            fileKey: key,\n            etags\n        });\n        if (!uploadOk) {\n            console.log(\"Failed to alert UT of upload completion\");\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: \"Failed to alert UT of upload completion\"\n            });\n        }\n        await new Promise((r)=>setTimeout(r, 750));\n        const serverData = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.withExponentialBackoff)(async ()=>{\n            const res = await fetch(pollingUrl, {\n                headers: {\n                    authorization: pollingJwt\n                }\n            }).then((r)=>r.json());\n            return res.status === \"done\" ? res.callbackData : void 0;\n        });\n        return {\n            name: file.name,\n            size: file.size,\n            key: presigned.key,\n            serverData,\n            url: \"https://utfs.io/f/\" + key\n        };\n    });\n    return Promise.all(fileUploadPromises);\n};\nvar genUploader = (initOpts)=>{\n    const url = (initOpts == null ? void 0 : initOpts.url) instanceof URL ? initOpts.url : (0,_chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_1__.getFullApiUrl)(initOpts == null ? void 0 : initOpts.url);\n    return (endpoint, opts)=>// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        DANGEROUS__uploadFiles(endpoint, {\n            ...opts,\n            url\n        });\n};\nvar classNames = (...classes)=>{\n    return classes.filter(Boolean).join(\" \");\n};\nvar generateMimeTypes = (fileTypes)=>{\n    const accepted = fileTypes.map((type)=>{\n        if (type === \"blob\") return \"blob\";\n        if (type === \"pdf\") return \"application/pdf\";\n        if (type.includes(\"/\")) return type;\n        else return `${type}/*`;\n    });\n    if (accepted.includes(\"blob\")) {\n        return void 0;\n    }\n    return accepted;\n};\nvar generateClientDropzoneAccept = (fileTypes)=>{\n    const mimeTypes = generateMimeTypes(fileTypes);\n    if (!mimeTypes) return void 0;\n    return Object.fromEntries(mimeTypes.map((type)=>[\n            type,\n            []\n        ]));\n};\n //# sourceMappingURL=client.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/client.mjs\n");

/***/ })

};
;